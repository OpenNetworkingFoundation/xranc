// Copyright 2020-present Open Networking Foundation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file defines O-RAN E2 interface, which is the interface between an eNB and RIC

syntax = "proto3";

package interface.e2;

service E2InterfaceService {
    rpc Send (stream E2Message) returns (stream ServiceResult) {}

    // Can be extended if necessary
}

// Definition of all message types in E2 interface
enum E2MessageType {
    E2_UNKNOWNMESSAGE = 0;
    E2_CELLCONFIGREQUEST = 1; // Defined, but not used yet
    E2_CELLCONFIGREPORT = 2; // Defined and used at xranc and ric-api-gw
    E2_UEADMISSIONREQUEST = 3; // Defined, but not used yet
    E2_UEADMISSIONRESPONSE = 4; // Defined, but not used yet
    E2_UEADMISSIONSTATUS = 5; // Defined and used at xranc and ric-api-gw
    E2_UECONTEXTUPDATE = 6; // Defined and used at xranc and ric-api-gw
    E2_UERECONFIGIND = 7; // Defined, but not used yet
    E2_UERELEASEIND = 8; // Defined, but not used yet
    E2_BEARERADMISSIONREQUEST = 9; // Defined, but not used yet
    E2_BEARERADMISSIONRESPONSE = 10; // Defined, but not used yet
    E2_BEARERADMISSIONSTATUS = 11; // Defined, but not used yet
    E2_BEARERRELEASEIND = 12; // Defined, but not used yet
    E2_HOREQUEST = 13; // Defined, but not used yet
    E2_HOFAILURE = 14; // Defined, but not used yet
    E2_HOCOMPLETE = 15; // Defined, but not used yet
    E2_RXSIGMEASREPORT = 16; // Defined, but not used yet
    E2_L2MEASCONFIG = 17; // Defined, but not used yet
    E2_RADIOMEASREPORTPERUE = 18; // Defined, but not used yet
    E2_RADIOMEASREPORTPERCELL = 19; // Defined, but not used yet
    E2_SCHEDMEASREPORTPERUE = 20; // Defined, but not used yet
    E2_SCHEDMEASREPORTPERCELL = 21; // Defined, but not used yet
    E2_PDCPMEASREPORTPERUE = 22; // Defined, but not used yet
    E2_UECAPABILITYINFO = 23; // Defined, but not used yet
    E2_UECAPABILITYENQUIRY = 24; // Defined, but not used yet
    E2_SCELLADD = 25; // Defined, but not used yet
    E2_SCELLADDSTATUS = 26; // Defined, but not used yet
    E2_SCELLDELETE = 27; // Defined, but not used yet
    E2_RRMCONFIG = 28; // Defined, but not used yet
    E2_RRMCONFIGSTATUS = 29;  // Defined, but not used yet
    E2_SENBADD = 30; // Defined, but not used yet
    E2_SENBADDSTATUS = 31; // Defined, but not used yet
    E2_SENBDELETE = 32; // Defined, but not used yet
    E2_TRAFFICSPLITCONFIG = 33; // Defined, but not used yet
    E2_HOCAUSE = 34; // Defined, but not used yet
    E2_RRCMEASCONFIG = 35; // Defined, but not used yet

    // Can be extended if necessary
}

// Message header
message E2MessageHeader {
    E2MessageType messageType = 1;

    // Can be extended if necessary
}

// Message payload; one of attributes defined below
message E2MessagePayload {
    oneof attributes {
        E2CellConfigRequestAttribute cellConfigRequestAttribute = 1;
        E2CellConfigReportAttribute cellConfigReportAttribute = 2;
        E2UEAdmissionRequestAttribute uEAdmissionRequestAttribute = 3;
        E2UEAdmissionResponseAttribute uEAdmissionResponseAttribute = 4;
        E2UEAdmissionStatusAttribute uEAdmissionStatusAttribute = 5;
        E2UEContextUpdateAttribute uEContextUpdateAttribute = 6;
        E2UEReconfigIndAttribute uEReconfigIndAttribute = 7;
        E2UEReleaseIndAttribute uEReleaseIndAttribute = 8;
        E2BearerAdmissionRequestAttribute bearerAdmissionRequestAttribute = 9;
        E2BearerAdmissionResponseAttribute bearerAdmissionResponseAttribute = 10;
        E2BearerAdmissionStatusAttribute bearerAdmissionStatusAttribute = 11;
        E2BearerReleaseIndAttribute bearerReleaseIndAttribute = 12;
        E2HORequestAttribute hORequestAttribute = 13;
        E2HOFailureAttribute hOFailureAttribute = 14;
        E2HOCompleteAttribute hOCompleteAttribute = 15;
        E2HOCauseAttribute hOCauseAttribute = 16;
        E2RRCMeasConfigAttribute rRCMeasConfigAttribute = 17;
        E2RxSigMeasReportAttribute rxSigMeasReportAttribute = 18;
        E2L2MeasConfigAttribute l2MeasConfigAttribute = 19;
        E2RadioMeasReportPerUEAttribute radioMeasReportPerU = 20;
        E2RadioMeasReportPerCellAttribute radioMeasReportPerCellAttribute = 21;
        E2SchedMeasReportPerUEAttribute schedMeasReportPerUEAttribute = 22;
        E2SchedMeasReportPerCellAttribute schedMeasReportPerCellAttribute = 23;
        E2PDCPMeasReportPerUeAttribute pDCPMeasReportPerUeAttribute = 24;
        E2RRMConfigAttribute rRMConfigAttribute = 25;
        E2RRMConfigStatusAttribute rRMConfigStatusAttribute = 26;
        E2UECapabilityEnquiryAttribute uECapabilityEnquiryAttribute = 27;
        E2UECapabilityInfoAttribute uECapabilityInfoAttribute = 28;
        E2ScellAddAttribute scellAddAttribute = 29;
        E2ScellAddStatusAttribute scellAddStatusAttribute = 30;
        E2ScellDeleteAttribute scellDeleteAttribute = 31;
        E2SeNBAddAttribute seNBAddAttribute = 32;
        E2SeNBAddStatusAttribute seNBAddStatusAttribute = 33;
        E2SeNBDeleteAttribute seNBDeleteAttribute = 34;
        E2TrafficSplitConfigAttribute trafficSplitConfigAttribute = 35;
    }
}

// Full message frame having one header and one payload
message E2Message {
    E2MessageHeader header = 1;
    E2MessagePayload payload = 2;
}

// RPC result
message ServiceResult {
    int32 resultCode = 1;
    string resultMessage = 2;
}

// From here, detailed E2 interface messages are coming up
// Please read a specicifaction document if you want to know in detail
// https://github.com/OpenNetworkingFoundation/xranc-sb-api/tree/master/docs

// Types of most values are 'string' for convenience

message E2ECGI {
    string plmnId = 1;
    string ecid = 2;
}

message E2CandScell {
    string pci = 1;
    string earfcnDl = 2;
}

// CellConfigRequest message
message E2CellConfigRequestAttribute {
    E2ECGI ecgi = 1;
}

// CellConfigReport message
message E2CellConfigReportAttribute {
    E2ECGI ecgi = 1;
    string pci = 2;
    repeated E2CandScell candScells = 3;
    string earfcnDl = 4;
    string earfcnUl = 5;
    string rbsPerTtiDl = 6;
    string rbsPerTtiUl = 7;
    string numTxAntenna = 8;
    string duplexMode = 9;
    string maxNumConnectedUes = 10;
    string maxNumConnectedBearers = 11;
    string maxNumUesSchedPerTtiDl = 12;
    string maxNumUesSchedPerTtiUl = 13;
    string dlfsSchedEnable = 14;
}

enum E2AdmEstCause {
    E2_EMERGENCY = 0;
    E2_HIGHHP_ACCESS = 1;
    E2_MT_ACCESS = 2;
    E2_MO_SIGNALLING = 3;
    E2_MO_DATA = 4;
}

enum E2SuccessOrFailure {
    E2_SUCCESS = 0;
    E2_FAILURE = 1;
}

// UEAdmissionRequest message
message E2UEAdmissionRequestAttribute {
    string crnti = 1;
    E2ECGI ecgi = 2;
    E2AdmEstCause admissionEstCause = 3;
}

// UEAdmissionResponse message
message E2UEAdmissionResponseAttribute {
    string crnti = 1;
    E2ECGI ecgi = 2;
    E2SuccessOrFailure admissionEstResponse = 3;
}

// UEAdmissionStatus message
message E2UEAdmissionStatusAttribute {
    string crnti = 1;
    E2ECGI ecgi = 2;
    E2SuccessOrFailure admissionEstStatus = 3;
}

// UEContextUpdate message
message E2UEContextUpdateAttribute {
    string crnti = 1;
    E2ECGI ecgi = 2;
    string mmeUeS1apId = 3;
    string enbUeS1apId = 4;
    string imsi = 5;
}

enum E2ReconfigCause {
    E2_RECONFIG_RLF = 0;
    E2_RECONFIG_HO_FAIL = 1;
    E2_RECONFIG_OTHERS = 2;
}

// UEReconfigInd message
message E2UEReconfigIndAttribute {
    string crntiOld = 1;
    E2ECGI ecgi = 2;
    string crntiNew = 3;
    E2ReconfigCause reconfigCause = 4;
}

enum E2ReleaseCause {
    E2_RELEASE_INACTIVITY = 0;
    E2_RELEASE_RLF = 1;
    E2_RELEASE_OTHERS = 2;
}

// UEReleaseInd message
message E2UEReleaseIndAttribute {
    string crnti = 1;
    E2ECGI ecgi = 2;
    E2ReleaseCause releaseCause = 3;
}

message E2UEAMBR {
    string ambrDl = 1;
    string ambrUl = 2;
}

enum E2ERABDirection {
    E2_DL = 0;
    E2_UL = 1;
    E2_BOTH = 2;
}

enum E2ERABType {
    E2_ERAB_DEFAULT = 0;
    E2_ERAB_DEDICATED = 1;
}

message E2ERABParamsItem {
    string id = 1;
    E2ERABDirection direction = 2;
    E2ERABType type = 3;
    string qci = 4;
    string arp = 5;
    string gbrDl = 6;
    string gbrUl = 7;
    string mbrDl = 8;
    string mbrUl = 9;
}

message E2ERABResponseItem {
    string id = 1;
    E2SuccessOrFailure decision = 2;
}

// BearerAdmissionRequest message
message E2BearerAdmissionRequestAttribute {
    string crnti = 1;
    E2ECGI ecgi = 2;
    E2UEAMBR ueAmbr = 3;
    string numErabsList = 4;
    repeated E2ERABParamsItem erabsParams = 5;
}

// BearerAdmissionResponse message
message E2BearerAdmissionResponseAttribute {
    string crnti = 1;
    E2ECGI ecgi = 2;
    string numErabsList = 3;
    repeated E2ERABResponseItem erabResponse = 4;
}

// BearerAdmissionStatus message
message E2BearerAdmissionStatusAttribute {
    string crnti = 1;
    E2ECGI ecgi = 2;
    string numErabsList = 3;
    repeated E2ERABResponseItem erabStatus = 4;
}

// BearerReleaseInd message
message E2BearerReleaseIndAttribute {
    string crnti = 1;
    E2ECGI ecgi = 2;
    string numErabsList = 3;
    repeated string erabIds = 4;
}

// HORequest message 
message E2HORequestAttribute {
    string crnti = 1;
    E2ECGI ecgiS = 2;
    E2ECGI ecgiT = 3;
}

// HOFailure message
message E2HOFailureAttribute {
    string crnti = 1;
    E2ECGI ecgiS = 2;
    string hoFailureCause = 3; // Not defined in standard yet
}

// HOComplete message
message E2HOCompleteAttribute {
    string crntiNew = 1;
    E2ECGI ecgiS = 2;
    E2ECGI ecgiT = 3;
}

// HOCause message
message E2HOCauseAttribute {
    string crnti = 1;
    E2ECGI ecgiS = 2;
    E2ECGI ecgiT = 3;
    string hoCause = 4;
    repeated E2RXSigReport hoTrigger = 5;
}

message E2MeasCell {
    string pci = 1;
    string cellIndividualOffset = 2;
}

message E2MeasObject {
    string dlFreq = 1;
    repeated E2MeasCell measCells = 2;
}

enum E2ReportParamPR {
    E2_REPORTPARAM_PR_NOTHING = 0;
    E2_REPORTPARAM_PR_PER_PARAM = 1;
    E2_REPORTPARAM_PR_A1PARAM = 2;
    E2_REPORTPARAM_PR_A2PARAM = 3;
    E2_REPORTPARAM_PR_A3PARAM = 4;
    E2_REPORTPARAM_PR_A4PARAM = 5;
    E2_REPORTPARAM_PR_A5PARAM = 6;
    E2_REPORTPARAM_PR_A6PARAM = 7;
}

message E2ReportParamChoice {
    oneof choice {
        E2PerParam perParam = 1;
        E2A1Param a1Param = 2;
        E2A2Param a2Param = 3;
        E2A3Param a3Param = 4;
        E2A4Param a4Param = 5;
        E2A5Param a5Param = 6;
        E2A6Param a6Param = 7;
    }
}

enum E2PerParamReportIntervalMs {
    E2_PERPARAM_MS_120 = 0;
    E2_PERPARAM_MS_240 = 1;
    E2_PERPARAM_MS_480 = 2;
    E2_PERPARAM_MS_640 = 3;
    E2_PERPARAM_MS_1024 = 4;
    E2_PERPARAM_MS_2048 = 5;
    E2_PERPARAM_MS_5120 = 6;
    E2_PERPARAM_MS_10240 = 7;
    E2_PERPARAM_MIN_1 = 8;
    E2_PERPARAM_MIN_6 = 9;
    E2_PERPARAM_MIN_12 = 10;
    E2_PERPARAM_MIN_30 = 11;
    E2_PERPARAM_MIN_60 = 12;
}

enum E2ThresholdEUTRAPR {
    E2_THRESHOLDEUTRA_PR_NOTHING = 0;
    E2_THRESHOLDEUTRA_PR_RSRP = 1;
    E2_THRESHOLDEUTRA_PR_RSRQ = 2;
}

message E2ThresholdEUTRAChoice {
    oneof choice {
        string thresholdRSRP = 1;
        string thresholdRSRQ = 2;
    }
}

message E2ThreasholdEUTRA {
    E2ThresholdEUTRAPR present = 1;
    E2ThresholdEUTRAChoice choice = 2;
}

message E2PerParam {
    E2PerParamReportIntervalMs reportIntervalMs = 1;
}

message E2A1Param {
    E2ThreasholdEUTRA a1Threshold = 1;
}

message E2A2Param {
    E2ThreasholdEUTRA a2Threshold = 1;
}

message E2A3Param {
    string a3Offset = 1;
}

message E2A4Param {
    E2ThreasholdEUTRA a4Threshold = 1;
}

message E2A5Param {
    E2ThreasholdEUTRA a5Threshold1 = 1;
    E2ThreasholdEUTRA a5Threshold2 = 2;
}

message E2A6Param {
    string a6Offset = 1;
}

enum E2TimeToTrigger {
    E2_TTT_MS0 = 0;
    E2_TTT_MS40 = 1;
    E2_TTT_MS64 = 2;
    E2_TTT_MS80 = 3;
    E2_TTT_MS100 = 4;
    E2_TTT_MS128 = 5;
    E2_TTT_MS160 = 6;
    E2_TTT_MS256 = 7;
    E2_TTT_MS320 = 8;
    E2_TTT_MS480 = 9;
    E2_TTT_MS512 = 10;
    E2_TTT_MS640 = 11;
    E2_TTT_MS1024 = 12;
    E2_TTT_MS1280 = 13;
    E2_TTT_MS2560 = 14;
    E2_TTT_MS5120 = 15;
}

message E2ReportParam {
    E2ReportParamPR present = 1;
    E2ReportParamChoice choice = 2;
    string hysteresis = 3;
    E2TimeToTrigger timetotrigger = 4;
}

enum E2TriggerQuantity {
    E2_TQ_RSRP = 0;
    E2_TQ_RSRQ = 1;
}

enum E2ReportQuality {
    E2_RQ_SAME = 0;
    E2_RQ_BOTH = 1;
}

message E2ReportConfig {
    E2ReportParam reportParams = 1;
    E2TriggerQuantity triggerQuantity = 2;
    E2ReportQuality reportQuality = 3;
}

enum E2MeasIdActionPR {
    E2_MEASIDACTION_PR_NOTHING = 0;
    E2_MEASIDACTION_PR_ADDMEASID = 1;
    E2_MEASIDACTION_PR_DELMEASID = 2;
    E2_MEASIDACTION_PR_HOTOTARGET = 3;
}

message E2AddMeasId {
    repeated string addMeasId = 1;
}

message E2DelMeasId {
    repeated string delMeasId = 1;
}

message E2MeasIdActionChoice {
    oneof choice {
        E2AddMeasId addMeasId = 1;
        E2DelMeasId delMeasId = 2;
        string hototarget = 3;
    }
}

message E2MeasIdAction {
    E2MeasIdActionPR present = 1;
    E2MeasIdActionChoice choice = 2;
}

message E2MeasID {
    string measObjectId = 1;
    string reportConfigId = 2;
    E2MeasIdAction action = 3;
}

// RRCMeasConfig message
message E2RRCMeasConfigAttribute {
    E2ECGI ecgi = 1;
    repeated string crnti = 2;
    repeated E2MeasObject measObjects = 3;
    repeated E2ReportConfig reportConfigs = 4;
    repeated E2MeasID measIds = 5;
}

message E2PCIARFCN {
    string pci = 1;
    string earfcnDl = 2;
}

message E2RXSigReport {
    E2PCIARFCN pciArfcn = 1;
    E2ECGI ecgi = 2;
    string rsrp = 3;
    string rsrq = 4;
    //string measId = 5; not defined in our SBI
}

// RxSigMeasReport message
message E2RxSigMeasReportAttribute {
    repeated string crnti = 1;
    E2ECGI ecgi = 2;
    repeated E2RXSigReport cellMeasReport = 3;
}

enum E2L2MeasReportIntervals {
    E2_L2MEASREPORTINTERVAL_NO_REPORT = 0;
    E2_L2MEASREPORTINTERVAL_MS_10 = 1;
    E2_L2MEASREPORTINTERVAL_MS_50 = 2;
    E2_L2MEASREPORTINTERVAL_MS_100 = 3;
    E2_L2MEASREPORTINTERVAL_MS_200 = 4;
    E2_L2MEASREPORTINTERVAL_MS_500 = 5;
    E2_L2MEASREPORTINTERVAL_MS_1024 = 6;
    E2_L2MEASREPORTINTERVAL_S_10 = 7;
    E2_L2MEASREPORTINTERVAL_MIN_1 = 8;
    E2_L2MEASREPORTINTERVAL_MIN_2 = 9;
    E2_L2MEASREPORTINTERVAL_MIN_5 = 10;
}

message E2L2ReportInterval {
    E2L2MeasReportIntervals tRadioMeasReportPerUe = 1;
    E2L2MeasReportIntervals tRadioMeasReportPerCell = 2;
    E2L2MeasReportIntervals tSchedMeasReportPerUe = 3;
    E2L2MeasReportIntervals tSchedMeasReportPerCell = 4;
    E2L2MeasReportIntervals tPdcpMeasReportPerUe = 5;
}

// L2MeasConfig message
message E2L2MeasConfigAttribute {
    E2ECGI ecgi = 1;
    repeated string crnti = 2;
    E2L2ReportInterval reportIntervals = 3;
}

// L2MeasureReports (periodic) messages
message E2RadioRepPerServCell {
    E2ECGI ecgi = 1;
    repeated string cqiHist = 2;
    repeated string riHist = 3;
    repeated string puschSinrHist = 4;
    repeated string pucchSinrHist = 5;
}

// RadioMeasReportPerUE message
message E2RadioMeasReportPerUEAttribute {
    E2ECGI ecgi = 1;
    string crnti = 2;
    repeated E2RadioRepPerServCell radioReportServCells = 3;
}

// RadioMeasReportPerCell message
message E2RadioMeasReportPerCellAttribute {
    E2ECGI ecgi = 1;
    repeated string puschIntfPwrHist = 2;
    repeated string pucchIntfPowerHist = 3;
}

message E2PRBUsage {
    repeated string prbUsageDl = 1;
    repeated string prbUsageUl = 2;
}

message E2SchedMeasRepPerServCell {
    E2ECGI ecgi = 1;
    repeated string qciVals = 2;
    E2PRBUsage prbUsage = 3;
    repeated string mcsDl = 4;
    repeated string numSchedTtisDl = 5;
    repeated string mcsUl = 6;
    repeated string numSchedTtisUl = 7;
    repeated string rankDl1 = 8;
    repeated string rankDl2 = 9;
}

// SchedMeasReportPerUE message
message E2SchedMeasReportPerUEAttribute {
    E2ECGI ecgi = 1;
    string crnti = 2;
    repeated E2SchedMeasRepPerServCell schedReportServCells = 3;
}

// SchedMeasReportPerCell message
message E2SchedMeasReportPerCellAttribute {
    E2ECGI ecgi = 1;
    repeated string qciVals = 2;
    E2PRBUsage prbUsagePcell = 3;
    E2PRBUsage prbUsageScell = 4;
}

// PdcpMeasReportPerUE message
message E2PDCPMeasReportPerUeAttribute {
    E2ECGI ecgi = 1;
    string crnti = 2;
    repeated string qciVals = 3;
    repeated string dataVolDl = 4;
    repeated string dataVolUl = 5;
    repeated string pktDelayDl = 6;
    repeated string pktDiscardRateDl = 7;
    repeated string pktLossRateDl = 8;
    repeated string pktLossRateUl = 9;
    repeated string throughputDl = 10;
    repeated string throughputUl = 11;
}

enum E2XICICPA {
    E2_XICIC_PA_DB_MINUS6 = 0;
    E2_XICIC_PA_DB_MINUX4DOT77 = 1;
    E2_XICIC_PA_DB_MINUS3 = 2;
    E2_XICIC_PA_DB_MINUS1DOT77 = 3;
    E2_XICIC_PA_DB_0 = 4;
    E2_XICIC_PA_DB_1 = 5;
    E2_XICIC_PA_DB_2 = 6;
    E2_XICIC_PA_DB_3 = 7;
}

// RRMConfig message
message E2RRMConfigAttribute {
    E2ECGI ecgi = 1;
    repeated string crnti = 2;
    E2PCIARFCN pciArfcn = 3;
    repeated E2XICICPA pA = 4;
    repeated string startPrbDl = 5;
    repeated string endPrbDl = 6;
    repeated string subFrameBitmaskDl = 7;
    repeated string p0UePusch = 8;
    repeated string startPrbUl = 9;
    repeated string endPrbUl = 10;
    repeated string subFrameBitmaskUl = 11;
}

// RRMConfigStatus message
message E2RRMConfigStatusAttribute {
    E2ECGI ecgi = 1;
    repeated string crnti = 2;
    repeated E2SuccessOrFailure status = 3;
}

enum E2CACapClassDl {
    E2_CACAP_CLASSDL_A = 0;
    E2_CACAP_CLASSDL_B = 1;
    E2_CACAP_CLASSDL_C = 2;
    E2_CACAP_CLASSDL_D = 3;
    E2_CACAP_CLASSDL_E = 4;
    E2_CACAP_CLASSDL_F = 5;
}

enum E2CACapClassUl {
    E2_CACAP_CLASSUL_A = 0;
    E2_CACAP_CLASSUL_B = 1;
    E2_CACAP_CLASSUL_C = 2;
    E2_CACAP_CLASSUL_D = 3;
    E2_CACAP_CLASSUL_E = 4;
    E2_CACAP_CLASSUL_F = 5;
}

message E2CACap {
    string band = 1;
    E2CACapClassDl caclassdl = 2;
    E2CACapClassUl caclassul = 3;
    string crossCarrierSched = 4;
}

enum E2DCCapDrbType {
    E2_DCCAP_DRBTYPE_SUPPORTED = 0;
}

message E2DCCap {
    E2DCCapDrbType drbTypeSplit = 1;
}

// UECapabilityEnqyuiry message
message E2UECapabilityEnquiryAttribute {
    string crnti = 1;
    E2ECGI ecgi = 2;
}

// UECapabilityInfo message
message E2UECapabilityInfoAttribute {
    string crnti = 1;
    E2ECGI ecgi = 2;
    E2CACap caCap = 3;
    E2DCCap dcCap = 4;
}

enum E2CADirection {
    E2_CADIRECTION_DL = 0;
    E2_CADIRECTION_UL = 1;
    E2_CADIRECTION_BOTH = 2;
}

message E2PropScell {
    E2PCIARFCN pciArfcn = 1;
    string crossCarrierSchedEnable = 2;
    E2CADirection caDirection = 3;
    string deactTimer = 4;
}

// ScellAdd message
message E2ScellAddAttribute {
    string crnti = 1;
    E2ECGI ecgi = 2;
    repeated E2PropScell scellsProp = 3;
}

// ScellAddStatus message
message E2ScellAddStatusAttribute {
    string crnti = 1;
    E2ECGI ecgi = 2;
    repeated E2PCIARFCN scellsInd = 3;
    repeated E2SuccessOrFailure status = 4;
}

// ScellDelete message
message E2ScellDeleteAttribute {
    string crnti = 1;
    E2ECGI ecgi = 2;
    repeated E2PCIARFCN scellsInd = 3;
}

// SeNBAdd message
message E2SeNBAddAttribute {
    string crnti = 1;
    E2ECGI mEcgi = 2;
    E2ECGI sEcgi = 3;
}

// SeNBAddStatus message
message E2SeNBAddStatusAttribute {
    string crnti = 1;
    E2ECGI ecgi = 2;
    E2SuccessOrFailure status = 3;
}

// SeNBDelete message
message E2SeNBDeleteAttribute {
    string crnti = 1;
    E2ECGI mEcgi = 2;
    E2ECGI sEcgi = 3;
}

message E2TrafficSplitPercentage {
    E2ECGI ecgi = 1;
    string trafficPercentageDl = 2;
    string trafficPercentageUl = 3;
}

// TrafficSplitConfig message
message E2TrafficSplitConfigAttribute {
    string crnti = 1;
    E2ECGI ecgi = 2;
    repeated E2TrafficSplitPercentage trafficSplitPercentage = 3;
}

// To be extended for other E2 message types